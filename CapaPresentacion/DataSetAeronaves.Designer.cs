//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CapaPresentacion {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetAeronaves")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetAeronaves : global::System.Data.DataSet {
        
        private AERONAVESDataTable tableAERONAVES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataSetAeronaves() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DataSetAeronaves(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AERONAVES"] != null)) {
                    base.Tables.Add(new AERONAVESDataTable(ds.Tables["AERONAVES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AERONAVESDataTable AERONAVES {
            get {
                return this.tableAERONAVES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DataSetAeronaves cln = ((DataSetAeronaves)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AERONAVES"] != null)) {
                    base.Tables.Add(new AERONAVESDataTable(ds.Tables["AERONAVES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableAERONAVES = ((AERONAVESDataTable)(base.Tables["AERONAVES"]));
            if ((initTable == true)) {
                if ((this.tableAERONAVES != null)) {
                    this.tableAERONAVES.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DataSetAeronaves";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetAeronaves.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAERONAVES = new AERONAVESDataTable();
            base.Tables.Add(this.tableAERONAVES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeAERONAVES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetAeronaves ds = new DataSetAeronaves();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void AERONAVESRowChangeEventHandler(object sender, AERONAVESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AERONAVESDataTable : global::System.Data.TypedTableBase<AERONAVESRow> {
            
            private global::System.Data.DataColumn columnIDAERONAVE;
            
            private global::System.Data.DataColumn columnTIPO_AERONAVE_IDTIPO_AERONAVE;
            
            private global::System.Data.DataColumn columnESTADO_IDESTADO;
            
            private global::System.Data.DataColumn columnFABRICANTES_AERO_IDFABRICANTE;
            
            private global::System.Data.DataColumn columnMODELOS_AERO_IDMODELO;
            
            private global::System.Data.DataColumn columnHORAS_VOLADAS;
            
            private global::System.Data.DataColumn columnCANT_MAX_HORAS;
            
            private global::System.Data.DataColumn columnPATENTE;
            
            private global::System.Data.DataColumn columnANIO_FAB;
            
            private global::System.Data.DataColumn columnCANT_MAX_PILOTOS;
            
            private global::System.Data.DataColumn columnFECHA_INSPECCION_ANUAL;
            
            private global::System.Data.DataColumn columnCAP_LITROS;
            
            private global::System.Data.DataColumn columnMOTOR;
            
            private global::System.Data.DataColumn columnRUEDAS;
            
            private global::System.Data.DataColumn columnCANT_HELICES;
            
            private global::System.Data.DataColumn columnCANT_TURBINAS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESDataTable() {
                this.TableName = "AERONAVES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AERONAVESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected AERONAVESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDAERONAVEColumn {
                get {
                    return this.columnIDAERONAVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TIPO_AERONAVE_IDTIPO_AERONAVEColumn {
                get {
                    return this.columnTIPO_AERONAVE_IDTIPO_AERONAVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ESTADO_IDESTADOColumn {
                get {
                    return this.columnESTADO_IDESTADO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FABRICANTES_AERO_IDFABRICANTEColumn {
                get {
                    return this.columnFABRICANTES_AERO_IDFABRICANTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MODELOS_AERO_IDMODELOColumn {
                get {
                    return this.columnMODELOS_AERO_IDMODELO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HORAS_VOLADASColumn {
                get {
                    return this.columnHORAS_VOLADAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CANT_MAX_HORASColumn {
                get {
                    return this.columnCANT_MAX_HORAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PATENTEColumn {
                get {
                    return this.columnPATENTE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ANIO_FABColumn {
                get {
                    return this.columnANIO_FAB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CANT_MAX_PILOTOSColumn {
                get {
                    return this.columnCANT_MAX_PILOTOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FECHA_INSPECCION_ANUALColumn {
                get {
                    return this.columnFECHA_INSPECCION_ANUAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CAP_LITROSColumn {
                get {
                    return this.columnCAP_LITROS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MOTORColumn {
                get {
                    return this.columnMOTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RUEDASColumn {
                get {
                    return this.columnRUEDAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CANT_HELICESColumn {
                get {
                    return this.columnCANT_HELICES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CANT_TURBINASColumn {
                get {
                    return this.columnCANT_TURBINAS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRow this[int index] {
                get {
                    return ((AERONAVESRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event AERONAVESRowChangeEventHandler AERONAVESRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event AERONAVESRowChangeEventHandler AERONAVESRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event AERONAVESRowChangeEventHandler AERONAVESRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event AERONAVESRowChangeEventHandler AERONAVESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddAERONAVESRow(AERONAVESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRow AddAERONAVESRow(
                        long IDAERONAVE, 
                        long TIPO_AERONAVE_IDTIPO_AERONAVE, 
                        long ESTADO_IDESTADO, 
                        long FABRICANTES_AERO_IDFABRICANTE, 
                        long MODELOS_AERO_IDMODELO, 
                        int HORAS_VOLADAS, 
                        int CANT_MAX_HORAS, 
                        string PATENTE, 
                        long ANIO_FAB, 
                        int CANT_MAX_PILOTOS, 
                        System.DateTime FECHA_INSPECCION_ANUAL, 
                        long CAP_LITROS, 
                        string MOTOR, 
                        string RUEDAS, 
                        int CANT_HELICES, 
                        int CANT_TURBINAS) {
                AERONAVESRow rowAERONAVESRow = ((AERONAVESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IDAERONAVE,
                        TIPO_AERONAVE_IDTIPO_AERONAVE,
                        ESTADO_IDESTADO,
                        FABRICANTES_AERO_IDFABRICANTE,
                        MODELOS_AERO_IDMODELO,
                        HORAS_VOLADAS,
                        CANT_MAX_HORAS,
                        PATENTE,
                        ANIO_FAB,
                        CANT_MAX_PILOTOS,
                        FECHA_INSPECCION_ANUAL,
                        CAP_LITROS,
                        MOTOR,
                        RUEDAS,
                        CANT_HELICES,
                        CANT_TURBINAS};
                rowAERONAVESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAERONAVESRow);
                return rowAERONAVESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRow FindByIDAERONAVE(long IDAERONAVE) {
                return ((AERONAVESRow)(this.Rows.Find(new object[] {
                            IDAERONAVE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                AERONAVESDataTable cln = ((AERONAVESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AERONAVESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnIDAERONAVE = base.Columns["IDAERONAVE"];
                this.columnTIPO_AERONAVE_IDTIPO_AERONAVE = base.Columns["TIPO_AERONAVE_IDTIPO_AERONAVE"];
                this.columnESTADO_IDESTADO = base.Columns["ESTADO_IDESTADO"];
                this.columnFABRICANTES_AERO_IDFABRICANTE = base.Columns["FABRICANTES_AERO_IDFABRICANTE"];
                this.columnMODELOS_AERO_IDMODELO = base.Columns["MODELOS_AERO_IDMODELO"];
                this.columnHORAS_VOLADAS = base.Columns["HORAS_VOLADAS"];
                this.columnCANT_MAX_HORAS = base.Columns["CANT_MAX_HORAS"];
                this.columnPATENTE = base.Columns["PATENTE"];
                this.columnANIO_FAB = base.Columns["ANIO_FAB"];
                this.columnCANT_MAX_PILOTOS = base.Columns["CANT_MAX_PILOTOS"];
                this.columnFECHA_INSPECCION_ANUAL = base.Columns["FECHA_INSPECCION_ANUAL"];
                this.columnCAP_LITROS = base.Columns["CAP_LITROS"];
                this.columnMOTOR = base.Columns["MOTOR"];
                this.columnRUEDAS = base.Columns["RUEDAS"];
                this.columnCANT_HELICES = base.Columns["CANT_HELICES"];
                this.columnCANT_TURBINAS = base.Columns["CANT_TURBINAS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnIDAERONAVE = new global::System.Data.DataColumn("IDAERONAVE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDAERONAVE);
                this.columnTIPO_AERONAVE_IDTIPO_AERONAVE = new global::System.Data.DataColumn("TIPO_AERONAVE_IDTIPO_AERONAVE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIPO_AERONAVE_IDTIPO_AERONAVE);
                this.columnESTADO_IDESTADO = new global::System.Data.DataColumn("ESTADO_IDESTADO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESTADO_IDESTADO);
                this.columnFABRICANTES_AERO_IDFABRICANTE = new global::System.Data.DataColumn("FABRICANTES_AERO_IDFABRICANTE", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFABRICANTES_AERO_IDFABRICANTE);
                this.columnMODELOS_AERO_IDMODELO = new global::System.Data.DataColumn("MODELOS_AERO_IDMODELO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODELOS_AERO_IDMODELO);
                this.columnHORAS_VOLADAS = new global::System.Data.DataColumn("HORAS_VOLADAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHORAS_VOLADAS);
                this.columnCANT_MAX_HORAS = new global::System.Data.DataColumn("CANT_MAX_HORAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANT_MAX_HORAS);
                this.columnPATENTE = new global::System.Data.DataColumn("PATENTE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATENTE);
                this.columnANIO_FAB = new global::System.Data.DataColumn("ANIO_FAB", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnANIO_FAB);
                this.columnCANT_MAX_PILOTOS = new global::System.Data.DataColumn("CANT_MAX_PILOTOS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANT_MAX_PILOTOS);
                this.columnFECHA_INSPECCION_ANUAL = new global::System.Data.DataColumn("FECHA_INSPECCION_ANUAL", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFECHA_INSPECCION_ANUAL);
                this.columnCAP_LITROS = new global::System.Data.DataColumn("CAP_LITROS", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCAP_LITROS);
                this.columnMOTOR = new global::System.Data.DataColumn("MOTOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOTOR);
                this.columnRUEDAS = new global::System.Data.DataColumn("RUEDAS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRUEDAS);
                this.columnCANT_HELICES = new global::System.Data.DataColumn("CANT_HELICES", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANT_HELICES);
                this.columnCANT_TURBINAS = new global::System.Data.DataColumn("CANT_TURBINAS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCANT_TURBINAS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnIDAERONAVE}, true));
                this.columnIDAERONAVE.AllowDBNull = false;
                this.columnIDAERONAVE.Unique = true;
                this.columnTIPO_AERONAVE_IDTIPO_AERONAVE.AllowDBNull = false;
                this.columnESTADO_IDESTADO.AllowDBNull = false;
                this.columnFABRICANTES_AERO_IDFABRICANTE.AllowDBNull = false;
                this.columnMODELOS_AERO_IDMODELO.AllowDBNull = false;
                this.columnHORAS_VOLADAS.AllowDBNull = false;
                this.columnCANT_MAX_HORAS.AllowDBNull = false;
                this.columnPATENTE.AllowDBNull = false;
                this.columnPATENTE.MaxLength = 25;
                this.columnANIO_FAB.AllowDBNull = false;
                this.columnCANT_MAX_PILOTOS.AllowDBNull = false;
                this.columnCAP_LITROS.AllowDBNull = false;
                this.columnMOTOR.AllowDBNull = false;
                this.columnMOTOR.MaxLength = 255;
                this.columnRUEDAS.AllowDBNull = false;
                this.columnRUEDAS.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRow NewAERONAVESRow() {
                return ((AERONAVESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AERONAVESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(AERONAVESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AERONAVESRowChanged != null)) {
                    this.AERONAVESRowChanged(this, new AERONAVESRowChangeEvent(((AERONAVESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AERONAVESRowChanging != null)) {
                    this.AERONAVESRowChanging(this, new AERONAVESRowChangeEvent(((AERONAVESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AERONAVESRowDeleted != null)) {
                    this.AERONAVESRowDeleted(this, new AERONAVESRowChangeEvent(((AERONAVESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AERONAVESRowDeleting != null)) {
                    this.AERONAVESRowDeleting(this, new AERONAVESRowChangeEvent(((AERONAVESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveAERONAVESRow(AERONAVESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetAeronaves ds = new DataSetAeronaves();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AERONAVESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class AERONAVESRow : global::System.Data.DataRow {
            
            private AERONAVESDataTable tableAERONAVES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal AERONAVESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAERONAVES = ((AERONAVESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long IDAERONAVE {
                get {
                    return ((long)(this[this.tableAERONAVES.IDAERONAVEColumn]));
                }
                set {
                    this[this.tableAERONAVES.IDAERONAVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TIPO_AERONAVE_IDTIPO_AERONAVE {
                get {
                    return ((long)(this[this.tableAERONAVES.TIPO_AERONAVE_IDTIPO_AERONAVEColumn]));
                }
                set {
                    this[this.tableAERONAVES.TIPO_AERONAVE_IDTIPO_AERONAVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ESTADO_IDESTADO {
                get {
                    return ((long)(this[this.tableAERONAVES.ESTADO_IDESTADOColumn]));
                }
                set {
                    this[this.tableAERONAVES.ESTADO_IDESTADOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long FABRICANTES_AERO_IDFABRICANTE {
                get {
                    return ((long)(this[this.tableAERONAVES.FABRICANTES_AERO_IDFABRICANTEColumn]));
                }
                set {
                    this[this.tableAERONAVES.FABRICANTES_AERO_IDFABRICANTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MODELOS_AERO_IDMODELO {
                get {
                    return ((long)(this[this.tableAERONAVES.MODELOS_AERO_IDMODELOColumn]));
                }
                set {
                    this[this.tableAERONAVES.MODELOS_AERO_IDMODELOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int HORAS_VOLADAS {
                get {
                    return ((int)(this[this.tableAERONAVES.HORAS_VOLADASColumn]));
                }
                set {
                    this[this.tableAERONAVES.HORAS_VOLADASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CANT_MAX_HORAS {
                get {
                    return ((int)(this[this.tableAERONAVES.CANT_MAX_HORASColumn]));
                }
                set {
                    this[this.tableAERONAVES.CANT_MAX_HORASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PATENTE {
                get {
                    return ((string)(this[this.tableAERONAVES.PATENTEColumn]));
                }
                set {
                    this[this.tableAERONAVES.PATENTEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long ANIO_FAB {
                get {
                    return ((long)(this[this.tableAERONAVES.ANIO_FABColumn]));
                }
                set {
                    this[this.tableAERONAVES.ANIO_FABColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CANT_MAX_PILOTOS {
                get {
                    return ((int)(this[this.tableAERONAVES.CANT_MAX_PILOTOSColumn]));
                }
                set {
                    this[this.tableAERONAVES.CANT_MAX_PILOTOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime FECHA_INSPECCION_ANUAL {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAERONAVES.FECHA_INSPECCION_ANUALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'FECHA_INSPECCION_ANUAL\' de la tabla \'AERONAVES\' es DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableAERONAVES.FECHA_INSPECCION_ANUALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long CAP_LITROS {
                get {
                    return ((long)(this[this.tableAERONAVES.CAP_LITROSColumn]));
                }
                set {
                    this[this.tableAERONAVES.CAP_LITROSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MOTOR {
                get {
                    return ((string)(this[this.tableAERONAVES.MOTORColumn]));
                }
                set {
                    this[this.tableAERONAVES.MOTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RUEDAS {
                get {
                    return ((string)(this[this.tableAERONAVES.RUEDASColumn]));
                }
                set {
                    this[this.tableAERONAVES.RUEDASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CANT_HELICES {
                get {
                    try {
                        return ((int)(this[this.tableAERONAVES.CANT_HELICESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'CANT_HELICES\' de la tabla \'AERONAVES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAERONAVES.CANT_HELICESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CANT_TURBINAS {
                get {
                    try {
                        return ((int)(this[this.tableAERONAVES.CANT_TURBINASColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("El valor de la columna \'CANT_TURBINAS\' de la tabla \'AERONAVES\' es DBNull.", e);
                    }
                }
                set {
                    this[this.tableAERONAVES.CANT_TURBINASColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFECHA_INSPECCION_ANUALNull() {
                return this.IsNull(this.tableAERONAVES.FECHA_INSPECCION_ANUALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFECHA_INSPECCION_ANUALNull() {
                this[this.tableAERONAVES.FECHA_INSPECCION_ANUALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCANT_HELICESNull() {
                return this.IsNull(this.tableAERONAVES.CANT_HELICESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCANT_HELICESNull() {
                this[this.tableAERONAVES.CANT_HELICESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCANT_TURBINASNull() {
                return this.IsNull(this.tableAERONAVES.CANT_TURBINASColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCANT_TURBINASNull() {
                this[this.tableAERONAVES.CANT_TURBINASColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class AERONAVESRowChangeEvent : global::System.EventArgs {
            
            private AERONAVESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRowChangeEvent(AERONAVESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public AERONAVESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CapaPresentacion.DataSetAeronavesTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AERONAVESTableAdapter : global::System.ComponentModel.Component {
        
        private global::Oracle.ManagedDataAccess.Client.OracleDataAdapter _adapter;
        
        private global::Oracle.ManagedDataAccess.Client.OracleConnection _connection;
        
        private global::Oracle.ManagedDataAccess.Client.OracleTransaction _transaction;
        
        private global::Oracle.ManagedDataAccess.Client.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public AERONAVESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::Oracle.ManagedDataAccess.Client.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Oracle.ManagedDataAccess.Client.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::Oracle.ManagedDataAccess.Client.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::Oracle.ManagedDataAccess.Client.OracleTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::Oracle.ManagedDataAccess.Client.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::Oracle.ManagedDataAccess.Client.OracleDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AERONAVES";
            tableMapping.ColumnMappings.Add("IDAERONAVE", "IDAERONAVE");
            tableMapping.ColumnMappings.Add("TIPO_AERONAVE_IDTIPO_AERONAVE", "TIPO_AERONAVE_IDTIPO_AERONAVE");
            tableMapping.ColumnMappings.Add("ESTADO_IDESTADO", "ESTADO_IDESTADO");
            tableMapping.ColumnMappings.Add("FABRICANTES_AERO_IDFABRICANTE", "FABRICANTES_AERO_IDFABRICANTE");
            tableMapping.ColumnMappings.Add("MODELOS_AERO_IDMODELO", "MODELOS_AERO_IDMODELO");
            tableMapping.ColumnMappings.Add("HORAS_VOLADAS", "HORAS_VOLADAS");
            tableMapping.ColumnMappings.Add("CANT_MAX_HORAS", "CANT_MAX_HORAS");
            tableMapping.ColumnMappings.Add("PATENTE", "PATENTE");
            tableMapping.ColumnMappings.Add("ANIO_FAB", "ANIO_FAB");
            tableMapping.ColumnMappings.Add("CANT_MAX_PILOTOS", "CANT_MAX_PILOTOS");
            tableMapping.ColumnMappings.Add("FECHA_INSPECCION_ANUAL", "FECHA_INSPECCION_ANUAL");
            tableMapping.ColumnMappings.Add("CAP_LITROS", "CAP_LITROS");
            tableMapping.ColumnMappings.Add("MOTOR", "MOTOR");
            tableMapping.ColumnMappings.Add("RUEDAS", "RUEDAS");
            tableMapping.ColumnMappings.Add("CANT_HELICES", "CANT_HELICES");
            tableMapping.ColumnMappings.Add("CANT_TURBINAS", "CANT_TURBINAS");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""ESCUADRILLA_HALCON"".""AERONAVES"" WHERE ((""IDAERONAVE"" = :Original_IDAERONAVE) AND (""TIPO_AERONAVE_IDTIPO_AERONAVE"" = :p2) AND (""ESTADO_IDESTADO"" = :Original_ESTADO_IDESTADO) AND (""FABRICANTES_AERO_IDFABRICANTE"" = :p4) AND (""MODELOS_AERO_IDMODELO"" = :Original_MODELOS_AERO_IDMODELO) AND (""HORAS_VOLADAS"" = :Original_HORAS_VOLADAS) AND (""CANT_MAX_HORAS"" = :Original_CANT_MAX_HORAS) AND (""PATENTE"" = :Original_PATENTE) AND (""ANIO_FAB"" = :Original_ANIO_FAB) AND (""CANT_MAX_PILOTOS"" = :Original_CANT_MAX_PILOTOS) AND ((:p7 = 1 AND ""FECHA_INSPECCION_ANUAL"" IS NULL) OR (""FECHA_INSPECCION_ANUAL"" = :p6)) AND (""CAP_LITROS"" = :Original_CAP_LITROS) AND (""MOTOR"" = :Original_MOTOR) AND (""RUEDAS"" = :Original_RUEDAS) AND ((:IsNull_CANT_HELICES = 1 AND ""CANT_HELICES"" IS NULL) OR (""CANT_HELICES"" = :Original_CANT_HELICES)) AND ((:IsNull_CANT_TURBINAS = 1 AND ""CANT_TURBINAS"" IS NULL) OR (""CANT_TURBINAS"" = :Original_CANT_TURBINAS)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::Oracle.ManagedDataAccess.Client.OracleParameter param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_IDAERONAVE";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "IDAERONAVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p2";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TIPO_AERONAVE_IDTIPO_AERONAVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_ESTADO_IDESTADO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ESTADO_IDESTADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p4";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "FABRICANTES_AERO_IDFABRICANTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_MODELOS_AERO_IDMODELO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "MODELOS_AERO_IDMODELO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_HORAS_VOLADAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HORAS_VOLADAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_MAX_HORAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_HORAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_PATENTE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = "PATENTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_ANIO_FAB";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANIO_FAB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_MAX_PILOTOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_PILOTOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p7";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p6";
            param.DbType = global::System.Data.DbType.DateTime;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.TimeStampLTZ;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CAP_LITROS";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CAP_LITROS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_MOTOR";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "MOTOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_RUEDAS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "RUEDAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IsNull_CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IsNull_CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.DeleteCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO ""ESCUADRILLA_HALCON"".""AERONAVES"" (""IDAERONAVE"", ""TIPO_AERONAVE_IDTIPO_AERONAVE"", ""ESTADO_IDESTADO"", ""FABRICANTES_AERO_IDFABRICANTE"", ""MODELOS_AERO_IDMODELO"", ""HORAS_VOLADAS"", ""CANT_MAX_HORAS"", ""PATENTE"", ""ANIO_FAB"", ""CANT_MAX_PILOTOS"", ""FECHA_INSPECCION_ANUAL"", ""CAP_LITROS"", ""MOTOR"", ""RUEDAS"", ""CANT_HELICES"", ""CANT_TURBINAS"") VALUES (:IDAERONAVE, :p1, :ESTADO_IDESTADO, :p3, :MODELOS_AERO_IDMODELO, :HORAS_VOLADAS, :CANT_MAX_HORAS, :PATENTE, :ANIO_FAB, :CANT_MAX_PILOTOS, :p5, :CAP_LITROS, :MOTOR, :RUEDAS, :CANT_HELICES, :CANT_TURBINAS)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IDAERONAVE";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "IDAERONAVE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p1";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TIPO_AERONAVE_IDTIPO_AERONAVE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ESTADO_IDESTADO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ESTADO_IDESTADO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p3";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "FABRICANTES_AERO_IDFABRICANTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MODELOS_AERO_IDMODELO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "MODELOS_AERO_IDMODELO";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "HORAS_VOLADAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HORAS_VOLADAS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_MAX_HORAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_HORAS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "PATENTE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = "PATENTE";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ANIO_FAB";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANIO_FAB";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_MAX_PILOTOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_PILOTOS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p5";
            param.DbType = global::System.Data.DbType.DateTime;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.TimeStampLTZ;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CAP_LITROS";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CAP_LITROS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MOTOR";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "MOTOR";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RUEDAS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "RUEDAS";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""ESCUADRILLA_HALCON"".""AERONAVES"" SET ""IDAERONAVE"" = :IDAERONAVE, ""TIPO_AERONAVE_IDTIPO_AERONAVE"" = :p1, ""ESTADO_IDESTADO"" = :ESTADO_IDESTADO, ""FABRICANTES_AERO_IDFABRICANTE"" = :p3, ""MODELOS_AERO_IDMODELO"" = :MODELOS_AERO_IDMODELO, ""HORAS_VOLADAS"" = :HORAS_VOLADAS, ""CANT_MAX_HORAS"" = :CANT_MAX_HORAS, ""PATENTE"" = :PATENTE, ""ANIO_FAB"" = :ANIO_FAB, ""CANT_MAX_PILOTOS"" = :CANT_MAX_PILOTOS, ""FECHA_INSPECCION_ANUAL"" = :p5, ""CAP_LITROS"" = :CAP_LITROS, ""MOTOR"" = :MOTOR, ""RUEDAS"" = :RUEDAS, ""CANT_HELICES"" = :CANT_HELICES, ""CANT_TURBINAS"" = :CANT_TURBINAS WHERE ((""IDAERONAVE"" = :Original_IDAERONAVE) AND (""TIPO_AERONAVE_IDTIPO_AERONAVE"" = :p2) AND (""ESTADO_IDESTADO"" = :Original_ESTADO_IDESTADO) AND (""FABRICANTES_AERO_IDFABRICANTE"" = :p4) AND (""MODELOS_AERO_IDMODELO"" = :Original_MODELOS_AERO_IDMODELO) AND (""HORAS_VOLADAS"" = :Original_HORAS_VOLADAS) AND (""CANT_MAX_HORAS"" = :Original_CANT_MAX_HORAS) AND (""PATENTE"" = :Original_PATENTE) AND (""ANIO_FAB"" = :Original_ANIO_FAB) AND (""CANT_MAX_PILOTOS"" = :Original_CANT_MAX_PILOTOS) AND ((:p7 = 1 AND ""FECHA_INSPECCION_ANUAL"" IS NULL) OR (""FECHA_INSPECCION_ANUAL"" = :p6)) AND (""CAP_LITROS"" = :Original_CAP_LITROS) AND (""MOTOR"" = :Original_MOTOR) AND (""RUEDAS"" = :Original_RUEDAS) AND ((:IsNull_CANT_HELICES = 1 AND ""CANT_HELICES"" IS NULL) OR (""CANT_HELICES"" = :Original_CANT_HELICES)) AND ((:IsNull_CANT_TURBINAS = 1 AND ""CANT_TURBINAS"" IS NULL) OR (""CANT_TURBINAS"" = :Original_CANT_TURBINAS)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IDAERONAVE";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "IDAERONAVE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p1";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TIPO_AERONAVE_IDTIPO_AERONAVE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ESTADO_IDESTADO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ESTADO_IDESTADO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p3";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "FABRICANTES_AERO_IDFABRICANTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MODELOS_AERO_IDMODELO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "MODELOS_AERO_IDMODELO";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "HORAS_VOLADAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HORAS_VOLADAS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_MAX_HORAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_HORAS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "PATENTE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = "PATENTE";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "ANIO_FAB";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANIO_FAB";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_MAX_PILOTOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_PILOTOS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p5";
            param.DbType = global::System.Data.DbType.DateTime;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.TimeStampLTZ;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CAP_LITROS";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CAP_LITROS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "MOTOR";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "MOTOR";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "RUEDAS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "RUEDAS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_IDAERONAVE";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "IDAERONAVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p2";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "TIPO_AERONAVE_IDTIPO_AERONAVE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_ESTADO_IDESTADO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ESTADO_IDESTADO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p4";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "FABRICANTES_AERO_IDFABRICANTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_MODELOS_AERO_IDMODELO";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "MODELOS_AERO_IDMODELO";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_HORAS_VOLADAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "HORAS_VOLADAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_MAX_HORAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_HORAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_PATENTE";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 25;
            param.IsNullable = true;
            param.SourceColumn = "PATENTE";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_ANIO_FAB";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "ANIO_FAB";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_MAX_PILOTOS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_MAX_PILOTOS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p7";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "p6";
            param.DbType = global::System.Data.DbType.DateTime;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.TimeStampLTZ;
            param.Size = 11;
            param.IsNullable = true;
            param.SourceColumn = "FECHA_INSPECCION_ANUAL";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CAP_LITROS";
            param.DbType = global::System.Data.DbType.Int64;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int64;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CAP_LITROS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_MOTOR";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "MOTOR";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_RUEDAS";
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.NVarchar2;
            param.Size = 255;
            param.IsNullable = true;
            param.SourceColumn = "RUEDAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IsNull_CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_HELICES";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_HELICES";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "IsNull_CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            param.SourceColumnNullMapping = true;
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::Oracle.ManagedDataAccess.Client.OracleParameter();
            param.ParameterName = "Original_CANT_TURBINAS";
            param.DbType = global::System.Data.DbType.Int32;
            param.OracleDbTypeEx = global::Oracle.ManagedDataAccess.Client.OracleDbType.Int32;
            param.Size = 22;
            param.IsNullable = true;
            param.SourceColumn = "CANT_TURBINAS";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::Oracle.ManagedDataAccess.Client.OracleConnection();
            this._connection.ConnectionString = global::CapaPresentacion.Properties.Settings.Default.ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::Oracle.ManagedDataAccess.Client.OracleCommand[2];
            this._commandCollection[0] = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT IDAERONAVE, TIPO_AERONAVE_IDTIPO_AERONAVE, ESTADO_IDESTADO, FABRICANTES_AERO_IDFABRICANTE, MODELOS_AERO_IDMODELO, HORAS_VOLADAS, CANT_MAX_HORAS, PATENTE, ANIO_FAB, CANT_MAX_PILOTOS, FECHA_INSPECCION_ANUAL, CAP_LITROS, MOTOR, RUEDAS, CANT_HELICES, CANT_TURBINAS FROM ESCUADRILLA_HALCON.AERONAVES";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::Oracle.ManagedDataAccess.Client.OracleCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT IDAERONAVE, TIPO_AERONAVE_IDTIPO_AERONAVE, ESTADO_IDESTADO, FABRICANTES_AERO_IDFABRICANTE, MODELOS_AERO_IDMODELO, HORAS_VOLADAS, CANT_MAX_HORAS, PATENTE, ANIO_FAB, CANT_MAX_PILOTOS, 
                  FECHA_INSPECCION_ANUAL, CAP_LITROS, MOTOR, RUEDAS, CANT_HELICES, CANT_TURBINAS
FROM     ESCUADRILLA_HALCON.AERONAVES
WHERE  (IDAERONAVE > 0)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSetAeronaves.AERONAVESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSetAeronaves.AERONAVESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSetAeronaves.AERONAVESDataTable dataTable = new DataSetAeronaves.AERONAVESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy1(DataSetAeronaves.AERONAVESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetAeronaves.AERONAVESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSetAeronaves dataSet) {
            return this.Adapter.Update(dataSet, "AERONAVES");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    long Original_IDAERONAVE, 
                    long p2, 
                    long Original_ESTADO_IDESTADO, 
                    long p4, 
                    long Original_MODELOS_AERO_IDMODELO, 
                    int Original_HORAS_VOLADAS, 
                    int Original_CANT_MAX_HORAS, 
                    string Original_PATENTE, 
                    long Original_ANIO_FAB, 
                    int Original_CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p6, 
                    long Original_CAP_LITROS, 
                    string Original_MOTOR, 
                    string Original_RUEDAS, 
                    global::System.Nullable<int> Original_CANT_HELICES, 
                    global::System.Nullable<int> Original_CANT_TURBINAS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_IDAERONAVE));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(p2));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_ESTADO_IDESTADO));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(p4));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_MODELOS_AERO_IDMODELO));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_HORAS_VOLADAS));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_CANT_MAX_HORAS));
            if ((Original_PATENTE == null)) {
                throw new global::System.ArgumentNullException("Original_PATENTE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_PATENTE));
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_ANIO_FAB));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_CANT_MAX_PILOTOS));
            if ((p6.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_CAP_LITROS));
            if ((Original_MOTOR == null)) {
                throw new global::System.ArgumentNullException("Original_MOTOR");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_MOTOR));
            }
            if ((Original_RUEDAS == null)) {
                throw new global::System.ArgumentNullException("Original_RUEDAS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_RUEDAS));
            }
            if ((Original_CANT_HELICES.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_CANT_HELICES.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_CANT_TURBINAS.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_CANT_TURBINAS.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long IDAERONAVE, 
                    long p1, 
                    long ESTADO_IDESTADO, 
                    long p3, 
                    long MODELOS_AERO_IDMODELO, 
                    int HORAS_VOLADAS, 
                    int CANT_MAX_HORAS, 
                    string PATENTE, 
                    long ANIO_FAB, 
                    int CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p5, 
                    long CAP_LITROS, 
                    string MOTOR, 
                    string RUEDAS, 
                    global::System.Nullable<int> CANT_HELICES, 
                    global::System.Nullable<int> CANT_TURBINAS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(IDAERONAVE));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(p1));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(ESTADO_IDESTADO));
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(p3));
            this.Adapter.InsertCommand.Parameters[4].Value = ((long)(MODELOS_AERO_IDMODELO));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(HORAS_VOLADAS));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(CANT_MAX_HORAS));
            if ((PATENTE == null)) {
                throw new global::System.ArgumentNullException("PATENTE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(PATENTE));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((long)(ANIO_FAB));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(CANT_MAX_PILOTOS));
            if ((p5.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(CAP_LITROS));
            if ((MOTOR == null)) {
                throw new global::System.ArgumentNullException("MOTOR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(MOTOR));
            }
            if ((RUEDAS == null)) {
                throw new global::System.ArgumentNullException("RUEDAS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(RUEDAS));
            }
            if ((CANT_HELICES.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(CANT_HELICES.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CANT_TURBINAS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(CANT_TURBINAS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long IDAERONAVE, 
                    long p1, 
                    long ESTADO_IDESTADO, 
                    long p3, 
                    long MODELOS_AERO_IDMODELO, 
                    int HORAS_VOLADAS, 
                    int CANT_MAX_HORAS, 
                    string PATENTE, 
                    long ANIO_FAB, 
                    int CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p5, 
                    long CAP_LITROS, 
                    string MOTOR, 
                    string RUEDAS, 
                    global::System.Nullable<int> CANT_HELICES, 
                    global::System.Nullable<int> CANT_TURBINAS, 
                    long Original_IDAERONAVE, 
                    long p2, 
                    long Original_ESTADO_IDESTADO, 
                    long p4, 
                    long Original_MODELOS_AERO_IDMODELO, 
                    int Original_HORAS_VOLADAS, 
                    int Original_CANT_MAX_HORAS, 
                    string Original_PATENTE, 
                    long Original_ANIO_FAB, 
                    int Original_CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p6, 
                    long Original_CAP_LITROS, 
                    string Original_MOTOR, 
                    string Original_RUEDAS, 
                    global::System.Nullable<int> Original_CANT_HELICES, 
                    global::System.Nullable<int> Original_CANT_TURBINAS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(IDAERONAVE));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(p1));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(ESTADO_IDESTADO));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(p3));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(MODELOS_AERO_IDMODELO));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(HORAS_VOLADAS));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(CANT_MAX_HORAS));
            if ((PATENTE == null)) {
                throw new global::System.ArgumentNullException("PATENTE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(PATENTE));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(ANIO_FAB));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(CANT_MAX_PILOTOS));
            if ((p5.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(p5.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(CAP_LITROS));
            if ((MOTOR == null)) {
                throw new global::System.ArgumentNullException("MOTOR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(MOTOR));
            }
            if ((RUEDAS == null)) {
                throw new global::System.ArgumentNullException("RUEDAS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(RUEDAS));
            }
            if ((CANT_HELICES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(CANT_HELICES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CANT_TURBINAS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(CANT_TURBINAS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_IDAERONAVE));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(p2));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_ESTADO_IDESTADO));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(p4));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_MODELOS_AERO_IDMODELO));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_HORAS_VOLADAS));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_CANT_MAX_HORAS));
            if ((Original_PATENTE == null)) {
                throw new global::System.ArgumentNullException("Original_PATENTE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_PATENTE));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((long)(Original_ANIO_FAB));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_CANT_MAX_PILOTOS));
            if ((p6.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(p6.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_CAP_LITROS));
            if ((Original_MOTOR == null)) {
                throw new global::System.ArgumentNullException("Original_MOTOR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_MOTOR));
            }
            if ((Original_RUEDAS == null)) {
                throw new global::System.ArgumentNullException("Original_RUEDAS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_RUEDAS));
            }
            if ((Original_CANT_HELICES.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_CANT_HELICES.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_CANT_TURBINAS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_CANT_TURBINAS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long p1, 
                    long ESTADO_IDESTADO, 
                    long p3, 
                    long MODELOS_AERO_IDMODELO, 
                    int HORAS_VOLADAS, 
                    int CANT_MAX_HORAS, 
                    string PATENTE, 
                    long ANIO_FAB, 
                    int CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p5, 
                    long CAP_LITROS, 
                    string MOTOR, 
                    string RUEDAS, 
                    global::System.Nullable<int> CANT_HELICES, 
                    global::System.Nullable<int> CANT_TURBINAS, 
                    long Original_IDAERONAVE, 
                    long p2, 
                    long Original_ESTADO_IDESTADO, 
                    long p4, 
                    long Original_MODELOS_AERO_IDMODELO, 
                    int Original_HORAS_VOLADAS, 
                    int Original_CANT_MAX_HORAS, 
                    string Original_PATENTE, 
                    long Original_ANIO_FAB, 
                    int Original_CANT_MAX_PILOTOS, 
                    global::System.Nullable<global::System.DateTime> p6, 
                    long Original_CAP_LITROS, 
                    string Original_MOTOR, 
                    string Original_RUEDAS, 
                    global::System.Nullable<int> Original_CANT_HELICES, 
                    global::System.Nullable<int> Original_CANT_TURBINAS) {
            return this.Update(Original_IDAERONAVE, p1, ESTADO_IDESTADO, p3, MODELOS_AERO_IDMODELO, HORAS_VOLADAS, CANT_MAX_HORAS, PATENTE, ANIO_FAB, CANT_MAX_PILOTOS, p5, CAP_LITROS, MOTOR, RUEDAS, CANT_HELICES, CANT_TURBINAS, Original_IDAERONAVE, p2, Original_ESTADO_IDESTADO, p4, Original_MODELOS_AERO_IDMODELO, Original_HORAS_VOLADAS, Original_CANT_MAX_HORAS, Original_PATENTE, Original_ANIO_FAB, Original_CANT_MAX_PILOTOS, p6, Original_CAP_LITROS, Original_MOTOR, Original_RUEDAS, Original_CANT_HELICES, Original_CANT_TURBINAS);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private AERONAVESTableAdapter _aERONAVESTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public AERONAVESTableAdapter AERONAVESTableAdapter {
            get {
                return this._aERONAVESTableAdapter;
            }
            set {
                this._aERONAVESTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._aERONAVESTableAdapter != null) 
                            && (this._aERONAVESTableAdapter.Connection != null))) {
                    return this._aERONAVESTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._aERONAVESTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DataSetAeronaves dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aERONAVESTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.AERONAVES.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aERONAVESTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DataSetAeronaves dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._aERONAVESTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.AERONAVES.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aERONAVESTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DataSetAeronaves dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._aERONAVESTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.AERONAVES.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aERONAVESTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DataSetAeronaves dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._aERONAVESTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aERONAVESTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" +
                        "sma cadena de conexión.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda" +
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co" +
                        "n las transacciones o el estado actual no permite que comience la transacción.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._aERONAVESTableAdapter != null)) {
                    revertConnections.Add(this._aERONAVESTableAdapter, this._aERONAVESTableAdapter.Connection);
                    this._aERONAVESTableAdapter.Connection = ((global::Oracle.ManagedDataAccess.Client.OracleConnection)(workConnection));
                    this._aERONAVESTableAdapter.Transaction = ((global::Oracle.ManagedDataAccess.Client.OracleTransaction)(workTransaction));
                    if (this._aERONAVESTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aERONAVESTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aERONAVESTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._aERONAVESTableAdapter != null)) {
                    this._aERONAVESTableAdapter.Connection = ((global::Oracle.ManagedDataAccess.Client.OracleConnection)(revertConnections[this._aERONAVESTableAdapter]));
                    this._aERONAVESTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591